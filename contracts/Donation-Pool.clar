(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INSUFFICIENT-BALANCE u101)
(define-constant ERR-INVALID-AMOUNT u102)
(define-constant ERR-INVALID-PROGRAM-ID u103)
(define-constant ERR-NOT-VERIFIED u104)
(define-constant ERR-ALREADY-DISTRIBUTED u105)
(define-constant ERR-INVALID-ADMIN u106)
(define-constant ERR-POOL-PAUSED u107)
(define-constant ERR-INVALID-TIMESTAMP u108)
(define-constant ERR-AUTHORITY-NOT-SET u109)
(define-constant ERR-INVALID-FEE-RATE u110)
(define-constant ERR-MAX-DISTRIBUTION-EXCEEDED u111)
(define-constant ERR-INVALID-GOVERNANCE u112)
(define-constant ERR-INVALID-ORACLE u113)
(define-constant ERR-INVALID-REGISTRY u114)
(define-constant ERR-PAUSE-NOT-ALLOWED u115)
(define-constant ERR-INVALID-STATUS u116)
(define-constant ERR-INVALID-CURRENCY u117)
(define-constant ERR-INVALID-LOCATION u118)
(define-constant ERR-INVALID-THRESHOLD u119)
(define-constant ERR-INVALID-PROPOSAL-ID u120)

(define-data-var pool-balance uint u0)
(define-data-var is-paused bool false)
(define-data-var admin-principal principal tx-sender)
(define-data-var governance-contract (optional principal) none)
(define-data-var oracle-contract (optional principal) none)
(define-data-var registry-contract (optional principal) none)
(define-data-var distribution-fee-rate uint u5)
(define-data-var max-distribution-per-request uint u1000000)
(define-data-var total-distributed uint u0)
(define-data-var last-distribution-timestamp uint u0)

(define-map distributions principal { program-id: uint, amount: uint, verified: bool, timestamp: uint, status: (string-ascii 20) })
(define-map pending-requests uint { admin: principal, amount: uint, program-id: uint, timestamp: uint })
(define-map distribution-history uint { program-id: uint, amount: uint, timestamp: uint, admin: principal })
(define-map allowed-currencies (string-ascii 20) bool)
(define-map allowed-locations (string-utf8 100) bool)
(define-map verification-thresholds uint uint)

(define-read-only (get-pool-balance)
  (ok (var-get pool-balance))
)

(define-read-only (get-distribution (admin principal))
  (ok (map-get? distributions admin))
)

(define-read-only (get-pending-request (request-id uint))
  (ok (map-get? pending-requests request-id))
)

(define-read-only (get-distribution-history (history-id uint))
  (ok (map-get? distribution-history history-id))
)

(define-read-only (get-total-distributed)
  (ok (var-get total-distributed))
)

(define-read-only (get-last-distribution-timestamp)
  (ok (var-get last-distribution-timestamp))
)

(define-read-only (is-pool-paused)
  (ok (var-get is-paused))
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
      (ok true)
      (err ERR-INVALID-AMOUNT))
)

(define-private (validate-program-id (program-id uint))
  (if (> program-id u0)
      (ok true)
      (err ERR-INVALID-PROGRAM-ID))
)

(define-private (validate-admin (admin principal))
  (if (not (is-eq admin 'SP000000000000000000002Q6VF78))
      (ok true)
      (err ERR-INVALID-ADMIN))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
      (ok true)
      (err ERR-INVALID-TIMESTAMP))
)

(define-private (validate-fee-rate (rate uint))
  (if (<= rate u10)
      (ok true)
      (err ERR-INVALID-FEE-RATE))
)

(define-private (validate-currency (cur (string-ascii 20)))
  (match (map-get? allowed-currencies cur)
    value (if value (ok true) (err ERR-INVALID-CURRENCY))
    (err ERR-INVALID-CURRENCY))
)

(define-private (validate-location (loc (string-utf8 100)))
  (match (map-get? allowed-locations loc)
    value (if value (ok true) (err ERR-INVALID-LOCATION))
    (err ERR-INVALID-LOCATION))
)

(define-private (validate-threshold (threshold uint))
  (if (and (> threshold u0) (<= threshold u100))
      (ok true)
      (err ERR-INVALID-THRESHOLD))
)

(define-private (validate-proposal-id (proposal-id uint))
  (if (> proposal-id u0)
      (ok true)
      (err ERR-INVALID-PROPOSAL-ID))
)

(define-public (set-governance-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set governance-contract (some contract))
    (ok true)
  )
)

(define-public (set-oracle-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set oracle-contract (some contract))
    (ok true)
  )
)

(define-public (set-registry-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set registry-contract (some contract))
    (ok true)
  )
)

(define-public (set-distribution-fee-rate (rate uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-fee-rate rate))
    (var-set distribution-fee-rate rate)
    (ok true)
  )
)

(define-public (pause-pool)
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set is-paused true)
    (ok true)
  )
)

(define-public (unpause-pool)
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set is-paused false)
    (ok true)
  )
)

(define-public (add-allowed-currency (cur (string-ascii 20)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (map-set allowed-currencies cur true)
    (ok true)
  )
)

(define-public (add-allowed-location (loc (string-utf8 100)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (map-set allowed-locations loc true)
    (ok true)
  )
)

(define-public (set-verification-threshold (program-id uint) (threshold uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-threshold threshold))
    (map-set verification-thresholds program-id threshold)
    (ok true)
  )
)

(define-public (deposit (amount uint))
  (begin
    (asserts! (not (var-get is-paused)) (err ERR-POOL-PAUSED))
    (try! (validate-amount amount))
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (var-set pool-balance (+ (var-get pool-balance) amount))
    (print { event: "deposit", amount: amount, sender: tx-sender })
    (ok true)
  )
)

(define-public (request-distribution (program-id uint) (amount uint) (admin principal) (proposal-id uint) (cur (string-ascii 20)) (loc (string-utf8 100)))
  (let ((registry (unwrap! (var-get registry-contract) (err ERR-INVALID-REGISTRY)))
        (oracle (unwrap! (var-get oracle-contract) (err ERR-INVALID-ORACLE)))
        (governance (unwrap! (var-get governance-contract) (err ERR-INVALID-GOVERNANCE)))
        (program-details (unwrap! (contract-call? registry get-program program-id) (err ERR-INVALID-PROGRAM-ID)))
        (next-request-id (+ (len (map-keys pending-requests)) u1))
        (fee (* amount (var-get distribution-fee-rate) (/ u100)))
        (net-amount (- amount fee)))
    (asserts! (not (var-get is-paused)) (err ERR-POOL-PAUSED))
    (try! (validate-amount amount))
    (try! (validate-program-id program-id))
    (try! (validate-admin admin))
    (try! (validate-proposal-id proposal-id))
    (try! (validate-currency cur))
    (try! (validate-location loc))
    (asserts! (is-eq admin (get admin program-details)) (err ERR-INVALID-ADMIN))
    (asserts! (<= amount (var-get pool-balance)) (err ERR-INSUFFICIENT-BALANCE))
    (asserts! (<= amount (var-get max-distribution-per-request)) (err ERR-MAX-DISTRIBUTION-EXCEEDED))
    (asserts! (unwrap! (contract-call? governance is-proposal-approved proposal-id) (err ERR-INVALID-GOVERNANCE)) (err ERR-INVALID-PROPOSAL-ID))
    (asserts! (unwrap! (contract-call? oracle is-verified program-id net-amount) (err ERR-INVALID-ORACLE)) (err ERR-NOT-VERIFIED))
    (map-set pending-requests next-request-id { admin: admin, amount: net-amount, program-id: program-id, timestamp: block-height })
    (print { event: "distribution-requested", request-id: next-request-id, amount: net-amount, program-id: program-id })
    (ok next-request-id)
  )
)

(define-public (execute-distribution (request-id uint))
  (let ((request (unwrap! (map-get? pending-requests request-id) (err ERR-INVALID-PROGRAM-ID)))
        (admin (get admin request))
        (amount (get amount request))
        (program-id (get program-id request))
        (next-history-id (+ (len (map-keys distribution-history)) u1)))
    (asserts! (not (var-get is-paused)) (err ERR-POOL-PAUSED))
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (as-contract (stx-transfer? amount tx-sender admin)))
    (var-set pool-balance (- (var-get pool-balance) amount))
    (var-set total-distributed (+ (var-get total-distributed) amount))
    (var-set last-distribution-timestamp block-height)
    (map-set distributions admin { program-id: program-id, amount: amount, verified: true, timestamp: block-height, status: "executed" })
    (map-set distribution-history next-history-id { program-id: program-id, amount: amount, timestamp: block-height, admin: admin })
    (map-delete pending-requests request-id)
    (print { event: "distribution-executed", request-id: request-id, amount: amount, program-id: program-id })
    (ok true)
  )
)

(define-public (cancel-pending-request (request-id uint))
  (let ((request (unwrap! (map-get? pending-requests request-id) (err ERR-INVALID-PROGRAM-ID))))
    (asserts! (is-eq tx-sender (get admin request)) (err ERR-NOT-AUTHORIZED))
    (map-delete pending-requests request-id)
    (print { event: "request-cancelled", request-id: request-id })
    (ok true)
  )
)